---
- name: Installs Linux packages
  hosts: localhost
  become: true
  tasks:
  # - name: Install CLI utils (Linux)
  #   ansible.builtin.package:
  #     name: "{{ item }}"
  #     state: present
  #   loop:
  #     - wget
  #     - curl
  #     - nano
  #     - fzf
  #     - jq
  #     - git
  #     - build-essential
  #   when: ansible_facts['os_family'] == 'Debian'

  # - name: Install zsh
  #   ansible.builtin.package:
  #     name: zsh
  #     state: present
  #   when: ansible_facts['os_family'] == 'Debian'

  # - name: Check if .zshrc file exists
  #   ansible.builtin.stat:
  #     path: "{{ ansible_env.HOME }}/.zshrc"
  #   register: zshrc_stat

  # - name: Create .zshrc file if it doesn't exist
  #   ansible.built.file:
  #     path: "{{ ansible_env.HOME }}/.zshrc"
  #     state: touch
  #   when: not zshrc_stat.stat.exists

  # - name: Install homebrew (Linux)
  #   ansible.builtin.shell:
  #     cmd: "/bin/bash -c '$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)'"
  #     creates: "/home/linuxbrew/.linuxbrew/bin/brew"
  #   when: ansible_facts.os_family == 'Linux'

  # - name: Install Homebrew if not installed (macOS)
  #   ansible.builtin.shell:
  #     cmd: "/bin/bash -c '$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)'"
  #     creates: /opt/homebrew/bin/brew
  #   when: ansible_facts.os_family == 'Darwin'

  # - name: Check if homebrew was installed successfully
  #   ansible.builtin.shell: which homebrew
  #   register: homebrew_check
  #   changed_when: false

  # - name: Fail playbook if homebrew installation fails
  #   ansible.builtin.fail:
  #     msg: "Homebrew installation failed"
  #   when: homebrew_check.zshrc_stat.stdout == "" # Empty -> i.e. no homebrew found

  # - name: Install CLI utils (macOS)
  #   ansible.builtin.homebrew:
  #     name: "{{ item }}"
  #     state: present
  #   loop:
  #     - wget
  #     - curl
  #     - nano
  #     - fzf
  #     - jq
  #     - git
  #     - tmux
  #   when: ansible_facts['os_family'] == 'Darwin'

  # - name: Check if XCode is installed (macOS)
  #   ansible.builtin.command:
  #     cmd: xcode-select -p
  #   register: xcode_check

  # - name: Install GCC if XCode is not installed (macOS)
  #   ansible.builtin.homebrew:
  #     name: gcc
  #     state: present
  #   when: not xcode_check == 0 and ansible_facts['os_family'] == 'Darwin'

  # - name: Install tmux
  #   ansible.builtin.package:
  #     name: tmux
  #     state: present
  #   when: ansible_facts['os_family'] == 'Debian'

  # - name: Check if .tmux.conf file exists
  #   ansible.builtin.stat:
  #     path: "{{ ansible_env.HOME }}/.tmux.conf"
  #   register: tmux-conf_stat

  # - name: Create .tmux.conf file if it doesn't exist
  #   ansible.built.file:
  #     path: "{{ ansible_env.HOME }}/.tmux.conf"
  #     state: touch
  #   when: not tmux-conf_stat.stat.exists

  # - name: Copy tmux.conf file
  #   ansible.builtin.copy:
  #     src: ./files/.tmux.conf
  #     dest: "{{ ansible_env.HOME }}/.tmux.conf"
  # - name: Install Azure CLI
  #   community.general.homebrew:
  #     name: azure-cli
  #     state: latest

  # - name: Install Python (Linux)
  #   ansible.builtin.package:
  #     name:
  #       - python3.12
  #       - python3-pip
  #     state: present
  #   when: ansible_facts['os_family'] == 'Debian'

  # - name: Install Python and pip on macOS (brew)
  #   ansible.builtin.homebrew:
  #     name:
  #       - python@3.12
  #       - pip
  #     state: present
  #   when: ansible_facts['os_family'] == 'Darwin'

  # - name: Install Go (Linux and macOS)
  #   ansible.builtin.homebrew:
  #     name: go
  #     state: present

  # - name: Install NVM
  #   ansible.builtin.shell: |
  #     curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.1/install.sh | bash
  #   args:
  #     creates: "{{ ansible_env.HOME }}/.nvm/nvm.sh"

  # - name: Install latest Node version
  #   ansible.builtin.shell: |
  #     nvm install node

  # - name: Verify Node installation
  # - name: Install pnpm
  # - name: Install SDKMan
  # - name: Install Intellij
  # - name: Install p10k


  # - name: Copy .zshrc file to the local directory # After all dependencies are installed
  #   ansible.builtin.copy:
  #     src: ./files/.zshrc
  #     dest: "{{ ansible_env.HOME }}/.zshrc"

  # - name: Install Node
  #   ansible.builtin.package:
  #     name: "{{ item }}"
  #     state: present
  #     loop:
  #       - nodejs
  #       - pnpm
  #       - npm
